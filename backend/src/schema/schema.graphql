## NOTE: This schema was generated by Graphback and should not be changed manually

"""Exposes a URL that specifies the behaviour of this scalar."""
directive @specifiedBy(
  """The URL that specifies the behaviour of this scalar."""
  url: String!
) on SCALAR

"""@model"""
type Comment {
  _id: GraphbackObjectID!
  text: String
  description: String

  """@manyToOne(field: 'comments', key: 'noteId')"""
  note: Note
}

input CommentFilter {
  _id: GraphbackObjectIDInput
  text: StringInput
  description: StringInput
  noteId: GraphbackObjectIDInput
  and: [CommentFilter!]
  or: [CommentFilter!]
  not: CommentFilter
}

type CommentResultList {
  items: [Comment]!
  offset: Int
  limit: Int
  count: Int
}

input CommentSubscriptionFilter {
  and: [CommentSubscriptionFilter!]
  or: [CommentSubscriptionFilter!]
  not: CommentSubscriptionFilter
  _id: GraphbackObjectIDInput
  text: StringInput
  description: StringInput
}

input CreateCommentInput {
  text: String
  description: String
  noteId: GraphbackObjectID
}

input CreateHobbyInput {
  type: HobbyType!
  rate: Int!
  unit: String!
  total: Int
  usersId: GraphbackObjectID
}

input CreateNoteInput {
  title: String!
  description: String
}

input CreatePlanInput {
  hobbyType: HobbyType!
  venue: String!
  address: String!
  date: String!
}

input CreateUserInput {
  authId: String!
  firstName: String!
  lastName: String!
  email: String!
  phoneNumber: String!
  gender: Gender!
  birthDate: String!
  photoUrl: String
  bio: String
  usersId: GraphbackObjectID
}

input CreateUserPlanNodeInput {
  userId: GraphbackObjectID
  planId: GraphbackObjectID
}

enum Gender {
  Male
  Female
  Other
}

scalar GraphbackObjectID

input GraphbackObjectIDInput {
  ne: GraphbackObjectID
  eq: GraphbackObjectID
  le: GraphbackObjectID
  lt: GraphbackObjectID
  ge: GraphbackObjectID
  gt: GraphbackObjectID
  in: [GraphbackObjectID!]
  between: [GraphbackObjectID!]
}

"""@model"""
type Hobby {
  _id: GraphbackObjectID!
  type: HobbyType!
  rate: Int!
  unit: String!
  total: Int

  """@manyToOne(field: 'hobbies', key: 'usersId')"""
  users: User
}

input HobbyFilter {
  _id: GraphbackObjectIDInput
  type: StringInput
  rate: IntInput
  unit: StringInput
  total: IntInput
  usersId: GraphbackObjectIDInput
  and: [HobbyFilter!]
  or: [HobbyFilter!]
  not: HobbyFilter
}

type HobbyResultList {
  items: [Hobby]!
  offset: Int
  limit: Int
  count: Int
}

input HobbySubscriptionFilter {
  and: [HobbySubscriptionFilter!]
  or: [HobbySubscriptionFilter!]
  not: HobbySubscriptionFilter
  _id: GraphbackObjectIDInput
  type: StringInput
  rate: IntInput
  unit: StringInput
  total: IntInput
}

enum HobbyType {
  Cycling
  Running
  Weightlifting
  Yoga
  Studying
  Painting
  Rowing
  Swimming
  Music
  Hiking
}

input IntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  in: [Int!]
  between: [Int!]
}

input MutateCommentInput {
  _id: GraphbackObjectID!
  text: String
  description: String
  noteId: GraphbackObjectID
}

input MutateHobbyInput {
  _id: GraphbackObjectID!
  type: HobbyType
  rate: Int
  unit: String
  total: Int
  usersId: GraphbackObjectID
}

input MutateNoteInput {
  _id: GraphbackObjectID!
  title: String
  description: String
}

input MutatePlanInput {
  _id: GraphbackObjectID!
  hobbyType: HobbyType
  venue: String
  address: String
  date: String
}

input MutateUserInput {
  _id: GraphbackObjectID!
  authId: String
  firstName: String
  lastName: String
  email: String
  phoneNumber: String
  gender: Gender
  birthDate: String
  photoUrl: String
  bio: String
  usersId: GraphbackObjectID
}

input MutateUserPlanNodeInput {
  _id: GraphbackObjectID!
  userId: GraphbackObjectID
  planId: GraphbackObjectID
}

type Mutation {
  createNote(input: CreateNoteInput!): Note
  updateNote(input: MutateNoteInput!): Note
  deleteNote(input: MutateNoteInput!): Note
  createHobby(input: CreateHobbyInput!): Hobby
  updateHobby(input: MutateHobbyInput!): Hobby
  deleteHobby(input: MutateHobbyInput!): Hobby
  createComment(input: CreateCommentInput!): Comment
  updateComment(input: MutateCommentInput!): Comment
  deleteComment(input: MutateCommentInput!): Comment
  createUser(input: CreateUserInput!): User
  updateUser(input: MutateUserInput!): User
  deleteUser(input: MutateUserInput!): User
  createPlan(input: CreatePlanInput!): Plan
  updatePlan(input: MutatePlanInput!): Plan
  deletePlan(input: MutatePlanInput!): Plan
  createUserPlanNode(input: CreateUserPlanNodeInput!): UserPlanNode
  updateUserPlanNode(input: MutateUserPlanNodeInput!): UserPlanNode
  deleteUserPlanNode(input: MutateUserPlanNodeInput!): UserPlanNode
}

"""@model"""
type Note {
  _id: GraphbackObjectID!
  title: String!
  description: String

  """
  @oneToMany(field: 'note', key: 'noteId')
  @oneToMany(field: 'note')
  """
  comments(filter: CommentFilter): [Comment]!
}

input NoteFilter {
  _id: GraphbackObjectIDInput
  title: StringInput
  description: StringInput
  and: [NoteFilter!]
  or: [NoteFilter!]
  not: NoteFilter
}

type NoteResultList {
  items: [Note]!
  offset: Int
  limit: Int
  count: Int
}

input NoteSubscriptionFilter {
  and: [NoteSubscriptionFilter!]
  or: [NoteSubscriptionFilter!]
  not: NoteSubscriptionFilter
  _id: GraphbackObjectIDInput
  title: StringInput
  description: StringInput
}

input OrderByInput {
  field: String!
  order: SortDirectionEnum = ASC
}

input PageRequest {
  limit: Int
  offset: Int
}

"""@model"""
type Plan {
  _id: GraphbackObjectID!

  """
  @oneToMany(field: 'plan', key: 'planId')
  @oneToMany(field: 'plan')
  """
  users(filter: UserPlanNodeFilter): [UserPlanNode]
  hobbyType: HobbyType!
  venue: String!
  address: String!
  date: String!
}

input PlanFilter {
  _id: GraphbackObjectIDInput
  hobbyType: StringInput
  venue: StringInput
  address: StringInput
  date: StringInput
  and: [PlanFilter!]
  or: [PlanFilter!]
  not: PlanFilter
}

type PlanResultList {
  items: [Plan]!
  offset: Int
  limit: Int
  count: Int
}

input PlanSubscriptionFilter {
  and: [PlanSubscriptionFilter!]
  or: [PlanSubscriptionFilter!]
  not: PlanSubscriptionFilter
  _id: GraphbackObjectIDInput
  hobbyType: StringInput
  venue: StringInput
  address: StringInput
  date: StringInput
}

type Query {
  getDraftNotes: [Note]
  getNote(id: GraphbackObjectID!): Note
  findNotes(filter: NoteFilter, page: PageRequest, orderBy: OrderByInput): NoteResultList!
  getHobby(id: GraphbackObjectID!): Hobby
  findHobbies(filter: HobbyFilter, page: PageRequest, orderBy: OrderByInput): HobbyResultList!
  getComment(id: GraphbackObjectID!): Comment
  findComments(filter: CommentFilter, page: PageRequest, orderBy: OrderByInput): CommentResultList!
  getUser(id: GraphbackObjectID!): User
  findUsers(filter: UserFilter, page: PageRequest, orderBy: OrderByInput): UserResultList!
  getPlan(id: GraphbackObjectID!): Plan
  findPlans(filter: PlanFilter, page: PageRequest, orderBy: OrderByInput): PlanResultList!
  getUserPlanNode(id: GraphbackObjectID!): UserPlanNode
  findUserPlanNodes(filter: UserPlanNodeFilter, page: PageRequest, orderBy: OrderByInput): UserPlanNodeResultList!
}

enum SortDirectionEnum {
  DESC
  ASC
}

input StringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  in: [String!]
  contains: String
  startsWith: String
  endsWith: String
}

type Subscription {
  newNote(filter: NoteSubscriptionFilter): Note!
  updatedNote(filter: NoteSubscriptionFilter): Note!
  deletedNote(filter: NoteSubscriptionFilter): Note!
  newHobby(filter: HobbySubscriptionFilter): Hobby!
  updatedHobby(filter: HobbySubscriptionFilter): Hobby!
  deletedHobby(filter: HobbySubscriptionFilter): Hobby!
  newComment(filter: CommentSubscriptionFilter): Comment!
  updatedComment(filter: CommentSubscriptionFilter): Comment!
  deletedComment(filter: CommentSubscriptionFilter): Comment!
  newUser(filter: UserSubscriptionFilter): User!
  updatedUser(filter: UserSubscriptionFilter): User!
  deletedUser(filter: UserSubscriptionFilter): User!
  newPlan(filter: PlanSubscriptionFilter): Plan!
  updatedPlan(filter: PlanSubscriptionFilter): Plan!
  deletedPlan(filter: PlanSubscriptionFilter): Plan!
  newUserPlanNode(filter: UserPlanNodeSubscriptionFilter): UserPlanNode!
  updatedUserPlanNode(filter: UserPlanNodeSubscriptionFilter): UserPlanNode!
  deletedUserPlanNode(filter: UserPlanNodeSubscriptionFilter): UserPlanNode!
}

"""@model"""
type User {
  _id: GraphbackObjectID!
  authId: String!
  firstName: String!
  lastName: String!
  email: String!
  phoneNumber: String!
  gender: Gender!
  birthDate: String!
  photoUrl: String
  bio: String

  """
  @oneToMany(field: 'users', key: 'usersId')
  @oneToMany(field: 'users')
  """
  hobbies(filter: HobbyFilter): [Hobby]

  """
  @oneToMany(field: 'user', key: 'userId')
  @oneToMany(field: 'user')
  """
  plans(filter: UserPlanNodeFilter): [UserPlanNode]

  """
  @oneToMany(field: 'users', key: 'usersId')
  @oneToMany(field: 'users')
  """
  matches(filter: UserFilter): [User]

  """@manyToOne(field: 'matches', key: 'usersId')"""
  users: User
}

input UserFilter {
  _id: GraphbackObjectIDInput
  authId: StringInput
  firstName: StringInput
  lastName: StringInput
  email: StringInput
  phoneNumber: StringInput
  gender: StringInput
  birthDate: StringInput
  photoUrl: StringInput
  bio: StringInput
  usersId: GraphbackObjectIDInput
  and: [UserFilter!]
  or: [UserFilter!]
  not: UserFilter
}

"""@model"""
type UserPlanNode {
  _id: GraphbackObjectID!

  """@manyToOne(field: 'plans', key: 'userId')"""
  user: User

  """@manyToOne(field: 'users', key: 'planId')"""
  plan: Plan
}

input UserPlanNodeFilter {
  _id: GraphbackObjectIDInput
  userId: GraphbackObjectIDInput
  planId: GraphbackObjectIDInput
  and: [UserPlanNodeFilter!]
  or: [UserPlanNodeFilter!]
  not: UserPlanNodeFilter
}

type UserPlanNodeResultList {
  items: [UserPlanNode]!
  offset: Int
  limit: Int
  count: Int
}

input UserPlanNodeSubscriptionFilter {
  and: [UserPlanNodeSubscriptionFilter!]
  or: [UserPlanNodeSubscriptionFilter!]
  not: UserPlanNodeSubscriptionFilter
  _id: GraphbackObjectIDInput
}

type UserResultList {
  items: [User]!
  offset: Int
  limit: Int
  count: Int
}

input UserSubscriptionFilter {
  and: [UserSubscriptionFilter!]
  or: [UserSubscriptionFilter!]
  not: UserSubscriptionFilter
  _id: GraphbackObjectIDInput
  authId: StringInput
  firstName: StringInput
  lastName: StringInput
  email: StringInput
  phoneNumber: StringInput
  gender: StringInput
  birthDate: StringInput
  photoUrl: StringInput
  bio: StringInput
}