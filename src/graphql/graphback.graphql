fragment NoteFields on Note {
   _id
   title
   description

}

fragment NoteExpandedFields on Note {
   _id
   title
   description
   comments {
      _id
      text
      description
   }
}

fragment CommentFields on Comment {
   _id
   text
   description

}

fragment CommentExpandedFields on Comment {
   _id
   text
   description
   note {
      _id
      title
      description
   }
}

fragment HobbyFields on Hobby {
   _id
   type
   rate
   unit
   total

}

fragment HobbyExpandedFields on Hobby {
   _id
   type
   rate
   unit
   total
   users {
      _id
      authId
      firstName
      lastName
      email
      phoneNumber
      gender
      birthDate
      photoUrl
      bio
   }
}

fragment UserFields on User {
   _id
   authId
   firstName
   lastName
   email
   phoneNumber
   gender
   birthDate
   photoUrl
   bio

}

fragment UserExpandedFields on User {
   _id
   authId
   firstName
   lastName
   email
   phoneNumber
   gender
   birthDate
   photoUrl
   bio
   hobbies {
      _id
      type
      rate
      unit
      total
   }
   plans {
      _id
   }
   matches {
      _id
      authId
      firstName
      lastName
      email
      phoneNumber
      gender
      birthDate
      photoUrl
      bio
   }
   likes {
      _id
      authId
      firstName
      lastName
      email
      phoneNumber
      gender
      birthDate
      photoUrl
      bio
   }
   rejected {
      _id
      authId
      firstName
      lastName
      email
      phoneNumber
      gender
      birthDate
      photoUrl
      bio
   }
   users {
      _id
      authId
      firstName
      lastName
      email
      phoneNumber
      gender
      birthDate
      photoUrl
      bio
   }
}

fragment UserPlanNodeFields on UserPlanNode {
   _id

}

fragment UserPlanNodeExpandedFields on UserPlanNode {
   _id
   user {
      _id
      authId
      firstName
      lastName
      email
      phoneNumber
      gender
      birthDate
      photoUrl
      bio
   }
   plan {
      _id
      hobbyType
      venue
      address
      date
   }
}

fragment PlanFields on Plan {
   _id
   hobbyType
   venue
   address
   date

}

fragment PlanExpandedFields on Plan {
   _id
   users {
      _id
   }   hobbyType
   venue
   address
   date

}

query findNotes($filter: NoteFilter, $page: PageRequest, $orderBy: OrderByInput) {
    findNotes(filter: $filter, page: $page, orderBy: $orderBy) {
      items {
        ...NoteExpandedFields
      }
      offset
      limit
      count
    }
}

query getNote($id: GraphbackObjectID!) {
    getNote(id: $id) {
      ...NoteExpandedFields
    }
}

query findComments($filter: CommentFilter, $page: PageRequest, $orderBy: OrderByInput) {
    findComments(filter: $filter, page: $page, orderBy: $orderBy) {
      items {
        ...CommentExpandedFields
      }
      offset
      limit
      count
    }
}

query getComment($id: GraphbackObjectID!) {
    getComment(id: $id) {
      ...CommentExpandedFields
    }
}

query findHobbies($filter: HobbyFilter, $page: PageRequest, $orderBy: OrderByInput) {
    findHobbies(filter: $filter, page: $page, orderBy: $orderBy) {
      items {
        ...HobbyExpandedFields
      }
      offset
      limit
      count
    }
}

query getHobby($id: GraphbackObjectID!) {
    getHobby(id: $id) {
      ...HobbyExpandedFields
    }
}

query findUsers($filter: UserFilter, $page: PageRequest, $orderBy: OrderByInput) {
    findUsers(filter: $filter, page: $page, orderBy: $orderBy) {
      items {
        ...UserExpandedFields
      }
      offset
      limit
      count
    }
}

query getUser($id: GraphbackObjectID!) {
    getUser(id: $id) {
      ...UserExpandedFields
    }
}

query findUserPlanNodes($filter: UserPlanNodeFilter, $page: PageRequest, $orderBy: OrderByInput) {
    findUserPlanNodes(filter: $filter, page: $page, orderBy: $orderBy) {
      items {
        ...UserPlanNodeExpandedFields
      }
      offset
      limit
      count
    }
}

query getUserPlanNode($id: GraphbackObjectID!) {
    getUserPlanNode(id: $id) {
      ...UserPlanNodeExpandedFields
    }
}

query findPlans($filter: PlanFilter, $page: PageRequest, $orderBy: OrderByInput) {
    findPlans(filter: $filter, page: $page, orderBy: $orderBy) {
      items {
        ...PlanExpandedFields
      }
      offset
      limit
      count
    }
}

query getPlan($id: GraphbackObjectID!) {
    getPlan(id: $id) {
      ...PlanExpandedFields
    }
}

mutation createNote($input: CreateNoteInput!) {
  createNote(input: $input) {
      ...NoteFields
  }
}

mutation updateNote($input: MutateNoteInput!) {
  updateNote(input: $input) {
      ...NoteFields
  }
}

mutation deleteNote($input: MutateNoteInput!) {
  deleteNote(input: $input) {
      ...NoteFields
  }
}

mutation createComment($input: CreateCommentInput!) {
  createComment(input: $input) {
      ...CommentFields
  }
}

mutation updateComment($input: MutateCommentInput!) {
  updateComment(input: $input) {
      ...CommentFields
  }
}

mutation deleteComment($input: MutateCommentInput!) {
  deleteComment(input: $input) {
      ...CommentFields
  }
}

mutation createHobby($input: CreateHobbyInput!) {
  createHobby(input: $input) {
      ...HobbyFields
  }
}

mutation updateHobby($input: MutateHobbyInput!) {
  updateHobby(input: $input) {
      ...HobbyFields
  }
}

mutation deleteHobby($input: MutateHobbyInput!) {
  deleteHobby(input: $input) {
      ...HobbyFields
  }
}

mutation createUser($input: CreateUserInput!) {
  createUser(input: $input) {
      ...UserFields
  }
}

mutation updateUser($input: MutateUserInput!) {
  updateUser(input: $input) {
      ...UserFields
  }
}

mutation deleteUser($input: MutateUserInput!) {
  deleteUser(input: $input) {
      ...UserFields
  }
}

mutation createUserPlanNode($input: CreateUserPlanNodeInput!) {
  createUserPlanNode(input: $input) {
      ...UserPlanNodeFields
  }
}

mutation updateUserPlanNode($input: MutateUserPlanNodeInput!) {
  updateUserPlanNode(input: $input) {
      ...UserPlanNodeFields
  }
}

mutation deleteUserPlanNode($input: MutateUserPlanNodeInput!) {
  deleteUserPlanNode(input: $input) {
      ...UserPlanNodeFields
  }
}

mutation createPlan($input: CreatePlanInput!) {
  createPlan(input: $input) {
      ...PlanFields
  }
}

mutation updatePlan($input: MutatePlanInput!) {
  updatePlan(input: $input) {
      ...PlanFields
  }
}

mutation deletePlan($input: MutatePlanInput!) {
  deletePlan(input: $input) {
      ...PlanFields
  }
}

subscription newNote($filter: NoteSubscriptionFilter) {
  newNote(filter: $filter) {
      ...NoteFields
  }
}

subscription updatedNote($filter: NoteSubscriptionFilter) {
  updatedNote(filter: $filter) {
      ...NoteFields
  }
}

subscription deletedNote($filter: NoteSubscriptionFilter) {
  deletedNote(filter: $filter) {
      ...NoteFields
  }
}

subscription newComment($filter: CommentSubscriptionFilter) {
  newComment(filter: $filter) {
      ...CommentFields
  }
}

subscription updatedComment($filter: CommentSubscriptionFilter) {
  updatedComment(filter: $filter) {
      ...CommentFields
  }
}

subscription deletedComment($filter: CommentSubscriptionFilter) {
  deletedComment(filter: $filter) {
      ...CommentFields
  }
}

subscription newHobby($filter: HobbySubscriptionFilter) {
  newHobby(filter: $filter) {
      ...HobbyFields
  }
}

subscription updatedHobby($filter: HobbySubscriptionFilter) {
  updatedHobby(filter: $filter) {
      ...HobbyFields
  }
}

subscription deletedHobby($filter: HobbySubscriptionFilter) {
  deletedHobby(filter: $filter) {
      ...HobbyFields
  }
}

subscription newUser($filter: UserSubscriptionFilter) {
  newUser(filter: $filter) {
      ...UserFields
  }
}

subscription updatedUser($filter: UserSubscriptionFilter) {
  updatedUser(filter: $filter) {
      ...UserFields
  }
}

subscription deletedUser($filter: UserSubscriptionFilter) {
  deletedUser(filter: $filter) {
      ...UserFields
  }
}

subscription newUserPlanNode($filter: UserPlanNodeSubscriptionFilter) {
  newUserPlanNode(filter: $filter) {
      ...UserPlanNodeFields
  }
}

subscription updatedUserPlanNode($filter: UserPlanNodeSubscriptionFilter) {
  updatedUserPlanNode(filter: $filter) {
      ...UserPlanNodeFields
  }
}

subscription deletedUserPlanNode($filter: UserPlanNodeSubscriptionFilter) {
  deletedUserPlanNode(filter: $filter) {
      ...UserPlanNodeFields
  }
}

subscription newPlan($filter: PlanSubscriptionFilter) {
  newPlan(filter: $filter) {
      ...PlanFields
  }
}

subscription updatedPlan($filter: PlanSubscriptionFilter) {
  updatedPlan(filter: $filter) {
      ...PlanFields
  }
}

subscription deletedPlan($filter: PlanSubscriptionFilter) {
  deletedPlan(filter: $filter) {
      ...PlanFields
  }
}